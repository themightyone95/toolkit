/* ==========================================================================
   COMPONENTS / #TILE
   ========================================================================== */

// Imports
@import "sky-toolkit-core/tools";

// Settings
$tile-animation-speed: $global-animation-speed;
$tile-animation-speed-slow: $global-animation-speed-slow;
$tile-arrow-color: color(white);
$tile-arrow-size: 22px !default;
$tile-border-colour: rgba(color(white), 0.3) !default;
$tile-border-width: 5px !default;
$tile-gradient: "tile";
$tile-gradient-caption: "default";
$tile-gradient-caption-hover: "highlight";
$tile-padding: $global-spacing-unit-small !default;
$tile-shadow: 0 1px 10px 0 rgba(color(black), 0.2) !default;
$tile-shadow-hover: 0 15px 20px -8px rgba(color(black), 0.2) !default;
$tile-sponsor-height: 20px;
$tile-sponsor-padding: $tile-border-width + 5px;

// Array of gradient names to generate specific brand themes for Tiles.
// By default all themes are generated.
// You can output specific themes by overwriting `$tile-themes`.
$tile-themes: "sky-1", "sky-account", "sky-atlantic", "sky-arts", "sky-box-sets", "sky-cinema", "sky-kids", "sky-living", "sky-witness", "sky-news", "sky-sports", "sky-store" !default;

// Dependencies (Optional)
// =========================================== */

// "Tile" builds upon "Shine" for `.c-tile__shine`.
//
// If you want to utilise this feature, you must import
// `sky-toolkit-ui/components/shine` *before*
// `sky-toolkit-ui/components/tile` in your main scss file.
//
// If you are using `sky-toolkit-ui/all`, please ignore the above.

/* Base
  ============================================ */

/**
 * Tile
 *
 * The base Tile component; providing the glass border and shadow.
 *
 * 1. Forces tile markers to sit above corresponding panels
 */
.c-tile {
  position: relative;
  background-color: $tile-border-colour;
  box-shadow: $tile-shadow;
  padding: $tile-border-width;
  margin-bottom: $global-spacing-unit;
  will-change: transform;
  z-index: z-index(1); /* [1] */
  height: auto;
}

/* Structure and Text
  ---------------------------------- */

/**
 * Tile Content
 *
 * The inner container of the tile provides the background gradient and extra
 * positioning for square tiles
 *
 * 1. Defensively clip overflowing text that can't be handled because of absolute
 *    positioning
 */
.c-tile__content {
  position: relative;
  overflow: hidden; /* [1] */

  > :last-child {
    margin-bottom: 0;
  }
}

/**
 * Tile Body & Caption - Shared Background structure
 *
 * All Tiles utilise a `.c-tile__body` to wrap the main content area.
 * Split Template Tiles utilise `.c-tile__body .c-tile__caption`.
 *
 * This allows us to use Pseudo Elements to build the Tile gradient background,
 * allowing for easy z-indexing and avoiding issues with nested content.
 */
.c-tile__body,
.c-tile__caption {
  /**
   * Tile Body & Caption - Default/Active Backgrounds
   *
   * Set up shared pseudo element styling
   */
  &::before,
  &::after {
    @include edge-position();
    content: "";
    position: absolute;
    will-change: transform;
  }

  /**
   * Tile Body & Caption - Default Background
   *
   * Sets the default visible background for Tiles.
   * Sits below the body/caption to avoid hiding content.
   */
  &::before {
    z-index: -2;
  }

  /**
   * Tile Body & Caption - Active Background
   *
   * Hidden by default and triggered on `.c-tile__link` hover.
   * Sits between `::before` and body/caption.
   */
  &::after {
    opacity: 0;
    transition: opacity $tile-animation-speed ease;
    z-index: -1;
  }
}

/**
 * Tile Body
 *
 * The body container for the tile; This should be applied to any content
 * which doesn't sit flush to the edge of the tile.
 */
.c-tile__body {
  height: 100%;
  padding: $tile-padding;
  position: relative;
  width: 100%;

  &::before {
    background-color: color(white);
  }

  &::after {
    /*! autoprefixer: off */
    @include gradient-background($tile-gradient);
  }

  > :last-child {
    margin-bottom: 0;
  }
}

/**
 * Tile Caption
 *
 * Captions are needed for media tiles; they add a new background gradient and
 * take up the lower 50% of the tile.
 */
.c-tile__caption {
  position: absolute;
  bottom: 0;
  height: 45%;
  z-index: z-index(2);
  text-align: left;

  &::before {
    /*! autoprefixer: off */
    @include gradient-background($tile-gradient-caption);
  }

  &::after {
    /*! autoprefixer: off */
    @include gradient-background($tile-gradient-caption-hover);
  }
}

/**
 * Tile Overlay
 *
 * Overlays are needed for full tiles, overlapping the tile content to take up
 * the lower side of the tile.
 */
.c-tile__overlay {
  position: absolute;
  text-align: center;
  bottom: 0;
  left: 1em;
  right: 1em;
  height: 20%;
  z-index: z-index(2);

  &--large {
    height: 25%;
  }
}

/**
 * Tile Title
 *
 * Normal heading classes e.g. `c-heading-alpha` are more useful in flexible
 * tiles, but square tiles need more specific and scalable headings in order to
 * prevent overflow.
 */
.c-tile__title {
  position: relative;
  font-size: font-size(heading-delta);
  line-height: 1.3;

  @include mq($from: medium, $until: large) {
    font-size: 2.8vw;
  }
}

/* Media
  ---------------------------------- */

/**
 * Tile Media
 *
 * Container for tile media which takes the top 55% of the tile when used.
 * This usually (but not always) contains a .c-tile-poster.
 *
 * Media and caption pairs should only be used in conjunction with the
 * `c-tile--square` modifier
 */
.c-tile__media {
  position: relative;
  overflow: hidden;
  display: block;
  height: 55.5%; // Fixes issue with rounding down of height leaving a gap.
}

/**
 * Tile Poster
 *
 * A poster is a full bleed image which scales when the linked tile is hovered.
 *
 * 1. Prevent IE9 adding height attributes for asynchronously rendered images.
 */
.c-tile__poster {
  height: auto; /* [1] */
  transition: transform $tile-animation-speed-slow ease;
  will-change: transform;
}

/**
 * Tile Channel
 *
 * A channel logo that sits above the bottom-left of the poster, unaffected by
 * the scale animation.
 */
.c-tile__channel {
  bottom: $global-spacing-unit-small;
  height: $global-spacing-unit;
  left: $global-spacing-unit-small;
  width: auto;
  position: absolute;
  z-index: z-index(1);
}

/**
 * Tile Sponsor
 *
 * A dedicated area to display the sponsor brand of a show or channel.
 * It should sit adjacent to the `c-tile__link`, linking off to a separate page.
 *
 * Note: Don't remove the brand name and rely on the image within the
 *       "Sponsored by ×" text.
 *       Use `<span class="u-hide-visually">×</span>` to hide the brand name.
 */
.c-tile__sponsor {
  font-size: font-size(text-smallprint);
  color: inherit;
  bottom: $tile-sponsor-padding;
  height: $global-spacing-unit;
  left: $tile-sponsor-padding;
  right: $tile-sponsor-padding;
  width: auto;
  position: absolute;
  z-index: z-index(2);
  outline: none;
}

/**
 * Tile Sponsor Image
 *
 * Icon/Logo of the sponsor brand, used purely for decoration.
 * Should be applied directly to the `<img>` within `.o-flag__img`.
 */
.c-tile__sponsor-img {
  height: $tile-sponsor-height;
}

/* Interaction
  ---------------------------------- */

/**
 * Tile Link
 *
 * Tiles can have links, just wrap the `.c-tile__content` with a
 * `a.c-tile__link` or `button.c-tile__link` node.
 *
 * Outline is set to "none" to utilise the `.has-focus` state on `c-tile`.
 *
 * 1. Reset `.c-tile__link` styling on <button> elements allowing more
 *    semantic usage.
 */
.c-tile__link {
  display: block;
  width: 100%; /* [1] */
  color: inherit;
  background-color: transparent; /* [1] */
  border: 0; /* [1] */
  outline: none;
  transition: color $tile-animation-speed ease, box-shadow $global-animation-speed-fast ease;
  position: relative;
  height: 100%;
  cursor: pointer;

  /**
   * Tile Link - Drop Shadow
   *
   * A pseudo-element is used to contain the hover box-shadow transition, set to
   * be invisible by default.
   * The `opacity` is then animated for smooth performance [1].
   *
   * 1. http://tobiasahlin.com/blog/how-to-animate-box-shadow/
   */
  &::before {
    @include edge-position(-$tile-border-width);
    content: "";
    position: absolute;
    box-shadow: $tile-shadow-hover;
    opacity: 0;
    transform-origin: bottom;
    transition: opacity $tile-animation-speed ease;
    will-change: transform;
  }

  /**
   * All default hover interaction for the Tile is handled via `.c-tile__link`.
   */
  &:hover {
    /**
     * Show the Tile Link's Drop Shadow
     */
    &::before {
      opacity: 1;
    }

    /**
     * Show the active Body / Caption gradient
     */
    .c-tile__body::after,
    .c-tile__caption::after {
      opacity: 1;
    }

    /**
     * Scale the Tile's Poster
     */
    .c-tile__poster {
      /*! autoprefixer: off */
      -ms-transform: scale(1.05, 1.05);
      transform: scale(1.05, 1.05);
    }
  }

  /**
   * Apply `:hover` / `:focus` text underline only to the Tile's Title.
   */
  @include hocus() {
    text-decoration: none;

    .c-tile__title {
      text-decoration: underline;
    }
  }
}

/**
 * Tile Shine
 *
 * Tile shine to be applied to a .c-shine component to give the correct
 * positioning when used on a Tile.
 *
 * The shine hover effect can then be applied by using `.c-shine-context`
 * alongside `.c-tile__link`.
 *
 * 1. As `.c-tile__link` sits inside a relative `.c-tile__content` by default,
 *    we have to ensure *both* top and bottom Tile paddings are counted.
 */
.c-tile__shine {
  position: absolute;
  right: 0;
  left: 0;
  z-index: z-index(3);
}

.c-tile__shine--top {
  top: -(($tile-padding * 2) + $tile-border-width); /* [1] */
}

.c-tile__shine--bottom {
  bottom: -(($tile-padding * 2) + $tile-border-width); /* [1] */
}

/* States
  =========================================== */

/**
 * Keyboard Focus
 *
 * Should be applied to `.c-tile` on keyboard focus for Accessibility.
 */
.c-tile.has-focus {
  @include focus-styles();
}

/**
 * Selected
 *
 * Should be applied to `.c-tile` when used to trigger the opening of a
 * corresponding `.c-panel`.
 */
.c-tile.is-selected {
  @include panel-indicator();
}

/**
 * Selected (Dark Themed Panels)
 *
 * Identical to above for `.c-panel--dark`
 */
.c-tile--dark.is-selected {
  @include panel-indicator("dark");
}

/* Modifiers
  =========================================== */

/**
 * Square Tiles
 *
 * Forces a Tile to keep a square ratio.
 */
.c-tile--square {
  height: 0;
  padding-top: 100%;
  padding-bottom: 0;

  .c-tile__content {
    @include edge-position($tile-border-width);
    position: absolute;
  }

  .c-tile__link,
  .c-tile__link::before {
    @include edge-position(0);
    position: absolute;
  }

  /**
   * 1. As `.c-tile__content` is now absolute, we can reduce the offset to both
   *    borders instead of paddings
   */
  .c-tile__shine--top {
    top: -($tile-padding + ($tile-border-width * 2)); /* [1] */
  }

  .c-tile__shine--bottom {
    bottom: -($tile-padding + ($tile-border-width * 2)); /* [1] */
  }
}

/**
 * Full Tiles
 *
 * Designed for Tiles that highlight a product, with the media set to fill
 * the background to compliment transparent PNG images.
 *
 * Text should then `overlay` the content.
 */
.c-tile--full {
  .c-tile__body {
    position: absolute;
    height: 100%;
    top: 0;

    &::after {
      /*! autoprefixer: off */
      @include gradient-background($tile-gradient);
    }
  }

  /**
   * Stretch image to fit full height on full tiles
   */
  .c-tile__media {
    height: auto;
    z-index: z-index(2);
    position: relative;
  }

  /**
   * Align to center on full tiles
   */
  .c-tile__poster {
    display: block;
    margin: 0 auto;
  }
}

/**
 * Collapsible Tiles
 *
 * Collapses split tiles at medium size, placing image and caption side by side.
 * Most of the code below resets changes to the structure by `.c-tile--square`.
 *
 * Please note: Only "Split Template" Tiles can be collapsed.
 */
.c-tile--collapsible {
  @include mq($until: medium) {
    height: auto;
    padding: $tile-border-width;

    .c-tile__link {
      position: relative;

      /* stylelint-disable-next-line max-nesting-depth */
      &::before {
        @include edge-position(-$tile-border-width);
      }
    }

    .c-tile__content {
      @include edge-position(0);
      position: relative;
      display: block;
      width: 100%;
    }

    /**
     * Display media and caption side by side.
     */
    .c-tile__caption,
    .c-tile__media {
      display: inline-block;
      vertical-align: top;
    }

    /**
     * Caption positioned absolutely to prevent text overflowing media height.
     */
    .c-tile__caption {
      position: absolute;
      width: 65%;
      height: 100%;
      overflow: hidden;
    }

    .c-tile__media {
      position: relative;
      width: 35%;
    }

    .c-tile__title {
      /*! autoprefixer: off */
      position: relative;
      top: 50%;
      -ms-transform: translateY(-50%);
      transform: translateY(-50%);
      font-size: font-size(heading-delta);
      line-height: 1.3;
    }
  }
}

/**
 * Themed Tiles
 *
 * For each brand gradient in `$tile-themes`, generate a Tile Theme class
 * e.g. `.c-tile--sky-1`
 */
@if $tile-themes {
  @each $brand in $tile-themes {
    @if map-has-key($gradients, $brand) {
      .c-tile--#{$brand} {
        .c-tile__link:hover,
        .c-tile__link:hover + .c-tile__sponsor {
          color: color(white);
        }

        // Set up style overrides
        .c-tile__body::after {
          /*! autoprefixer: off */
          @include gradient-background($brand);
        }
      }
    } @else {
      @warn "Unknown `#{$brand}` in $gradients. Please check this brand is available.";
    }
  }
}
